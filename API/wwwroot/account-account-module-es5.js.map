{"version":3,"sources":["webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/login/login.component.ts","webpack:///src/app/account/login/login.component.html","webpack:///src/app/account/register/register.component.ts","webpack:///src/app/account/register/register.component.html"],"names":["routes","path","component","AccountRoutingModule","forChild","declarations","imports","exports","AccountModule","LoginComponent","accountService","router","route","createForm","returnUrl","snapshot","queryParams","loginForm","email","required","password","login","value","subscribe","user","navigateByUrl","onSubmit","selector","templateUrl","styleUrls","RegisterComponent","errors","complexPassword","loading","registerForm","displayName","validateEmailNotTaken","pattern","register","error","control","valueChanges","pipe","checkEmailExists","result","emailExists","markAsTouched"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: 'login', component: LoginComponent\n  },\n  {\n    path: 'register', component: RegisterComponent \n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AccountModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { ActivatedRoute, ActivatedRouteSnapshot, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  returnUrl: string;\n  constructor(private accountService: AccountService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || '/shop';\n  }\n\n  createForm() {\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    });\n  }\n\n  onSubmit() {\n    this.accountService.login(this.loginForm.value).subscribe(user => {\n      this.router.navigateByUrl(this.returnUrl);\n    })\n  }\n\n}\n","<div class=\"d-flex justify-content-center mt-5\">\n    <div class=\"col-3\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center mb-4\">\n                <div class=\"form-floating mb-3\">\n                    <input formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\"\n                        [class.is-invalid]=\"loginForm.get('email')?.touched && loginForm.get('email')?.invalid\" placeholder=\"name@example.com\">\n                    <label for=\"floatingInput\">Email address</label>\n                    <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('email')?.errors && loginForm.get('email')?.errors['required'] === true\">\n                        Email is required\n                    </div>\n                    <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('email')?.errors && loginForm.get('email')?.errors['email'] === true\">\n                        Email is invalid\n                    </div>\n                </div>\n                <div class=\"form-floating\">\n                    <input formControlName=\"password\" type=\"password\" class=\"form-control\"\n                    [class.is-invalid]=\"loginForm.get('password')?.touched && loginForm.get('password')?.invalid\" placeholder=\"name@example.com\"\n                        id=\"floatingPassword\" placeholder=\"Password\">\n                    <label for=\"floatingPassword\">Password</label>\n                    <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('password')?.errors && loginForm.get('password')?.errors['required'] === true\">\n                        Password is required\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-grid\">\n                <button [disabled]=\"!loginForm.valid\" class=\"btn btn-lg btn-primary mt-3\">Sign in</button>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\nimport { debounceTime, finalize, map, switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  errors: string[] | null = null;\n  complexPassword = \"(?=^.{6,10}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;:;'?/&gt;.&lt;,])(?!.*\\s).*$\";\n  loading = false;\n  constructor(private accountService: AccountService, private router: Router) { }\n\n\n  ngOnInit(): void {\n    this.createForm();\n  }\n\n  createForm() {\n    this.registerForm = new FormGroup({\n      displayName: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email], [this.validateEmailNotTaken()]),\n      password: new FormControl('', [Validators.required, Validators.pattern(this.complexPassword)]),\n    });\n  }\n\n  onSubmit() {\n    this.accountService.register(this.registerForm.value).subscribe(user => {\n      this.router.navigateByUrl('/shop');\n    }, error => {\n      this.errors = error.errors;\n    })\n  }\n\n  validateEmailNotTaken(): AsyncValidatorFn {\n    return (control: AbstractControl) => {\n      return control.valueChanges.pipe(\n        debounceTime(1000),\n        take(1),\n        switchMap(() => {\n          this.loading = true;\n          return this.accountService.checkEmailExists(control.value).pipe(map(result => result ? { emailExists: true } : null),\n            finalize(() => {\n              control.markAsTouched;\n              this.loading = false;\n            }))\n        })\n      )\n    }\n  }\n\n\n}\n","<div class=\"d-flex justify-content-center mt-5\">\n    <div class=\"col-3\">\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center mb-4\">\n                <div class=\"form-floating mb-3\">\n                    <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" id=\"displayName\"\n                        [class.is-invalid]=\"registerForm.get('displayName')?.touched && registerForm.get('displayName')?.invalid\"\n                        placeholder=\"name@example.com\">\n                    <label for=\"floatingInput\">DisplayName</label>\n                    <div class=\"invalid-feedback\"\n                        *ngIf=\"registerForm.get('displayName')?.errors && registerForm.get('displayName')?.errors['required'] === true\">\n                        Display Name is required\n                    </div>\n                </div>\n                <div class=\"form-floating mb-3\">\n                    <ng-container class=\"position-relative\">\n                        <input formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\"\n                            [class.is-invalid]=\"registerForm.get('email')?.touched && registerForm.get('email')?.invalid\"\n                            placeholder=\"name@example.com\">\n                        <i *ngIf=\"loading\" class=\"fa fa-spinner fa-spin loader\"></i>\n                        <label for=\"floatingInput\">Email address</label>\n                        <div class=\"invalid-feedback\"\n                            *ngIf=\"registerForm.get('email')?.errors && registerForm.get('email')?.errors['required'] === true\">\n                            Email is required\n                        </div>\n                        <div class=\"invalid-feedback\"\n                            *ngIf=\"registerForm.get('email')?.errors && registerForm.get('email')?.errors['email'] === true\">\n                            Email is invalid\n                        </div>\n                        <div class=\"invalid-feedback\"\n                            *ngIf=\"registerForm.get('email')?.errors && registerForm.get('email')?.errors['emailExists'] === true\">\n                            Email is taken please try another email\n                        </div>\n                    </ng-container>\n\n                </div>\n                <div class=\"form-floating\">\n                    <input formControlName=\"password\" type=\"password\" class=\"form-control\"\n                        [class.is-invalid]=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\"\n                        placeholder=\"name@example.com\" id=\"floatingPassword\" placeholder=\"Password\">\n                    <label for=\"floatingPassword\">Password</label>\n                    <div class=\"invalid-feedback\"\n                        *ngIf=\"registerForm.get('password')?.errors && registerForm.get('password')?.errors['required'] === true\">\n                        Password is required\n                    </div>\n                    <div class=\"invalid-feedback\"\n                        *ngIf=\"registerForm.get('password')?.errors && registerForm.get('password')?.errors['pattern'] === true\">\n                        Password needs to be complex, 1 uppercase, 1 lowercase with special characters and the correct\n                        minlength (6)\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-grid\">\n                <button [disabled]=\"!registerForm.valid\" class=\"btn btn-lg btn-primary mt-3\">Register</button>\n            </div>\n        </form>\n    </div>\n</div>"]}