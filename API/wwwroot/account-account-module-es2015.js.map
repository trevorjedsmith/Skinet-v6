{"version":3,"sources":["./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/login/login.component.ts","./src/app/account/login/login.component.html","./src/app/account/register/register.component.ts","./src/app/account/register/register.component.html"],"names":[],"mappings":"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","file":"account-account-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: 'login', component: LoginComponent\n  },\n  {\n    path: 'register', component: RegisterComponent \n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AccountModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { ActivatedRoute, ActivatedRouteSnapshot, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  returnUrl: string;\n  constructor(private accountService: AccountService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || '/shop';\n  }\n\n  createForm() {\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    });\n  }\n\n  onSubmit() {\n    this.accountService.login(this.loginForm.value).subscribe(user => {\n      this.router.navigateByUrl(this.returnUrl);\n    })\n  }\n\n}\n","<div class=\"d-flex justify-content-center mt-5\">\n    <div class=\"col-3\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center mb-4\">\n                <div class=\"form-floating mb-3\">\n                    <input formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\"\n                        [class.is-invalid]=\"loginForm.get('email')?.touched && loginForm.get('email')?.invalid\" placeholder=\"name@example.com\">\n                    <label for=\"floatingInput\">Email address</label>\n                    <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('email')?.errors && loginForm.get('email')?.errors['required'] === true\">\n                        Email is required\n                    </div>\n                    <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('email')?.errors && loginForm.get('email')?.errors['email'] === true\">\n                        Email is invalid\n                    </div>\n                </div>\n                <div class=\"form-floating\">\n                    <input formControlName=\"password\" type=\"password\" class=\"form-control\"\n                    [class.is-invalid]=\"loginForm.get('password')?.touched && loginForm.get('password')?.invalid\" placeholder=\"name@example.com\"\n                        id=\"floatingPassword\" placeholder=\"Password\">\n                    <label for=\"floatingPassword\">Password</label>\n                    <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('password')?.errors && loginForm.get('password')?.errors['required'] === true\">\n                        Password is required\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-grid\">\n                <button [disabled]=\"!loginForm.valid\" class=\"btn btn-lg btn-primary mt-3\">Sign in</button>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\nimport { debounceTime, finalize, map, switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  errors: string[] | null = null;\n  complexPassword = \"(?=^.{6,10}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;:;'?/&gt;.&lt;,])(?!.*\\s).*$\";\n  loading = false;\n  constructor(private accountService: AccountService, private router: Router) { }\n\n\n  ngOnInit(): void {\n    this.createForm();\n  }\n\n  createForm() {\n    this.registerForm = new FormGroup({\n      displayName: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email], [this.validateEmailNotTaken()]),\n      password: new FormControl('', [Validators.required, Validators.pattern(this.complexPassword)]),\n    });\n  }\n\n  onSubmit() {\n    this.accountService.register(this.registerForm.value).subscribe(user => {\n      this.router.navigateByUrl('/shop');\n    }, error => {\n      this.errors = error.errors;\n    })\n  }\n\n  validateEmailNotTaken(): AsyncValidatorFn {\n    return (control: AbstractControl) => {\n      return control.valueChanges.pipe(\n        debounceTime(1000),\n        take(1),\n        switchMap(() => {\n          this.loading = true;\n          return this.accountService.checkEmailExists(control.value).pipe(map(result => result ? { emailExists: true } : null),\n            finalize(() => {\n              control.markAsTouched;\n              this.loading = false;\n            }))\n        })\n      )\n    }\n  }\n\n\n}\n","<div class=\"d-flex justify-content-center mt-5\">\n    <div class=\"col-3\">\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center mb-4\">\n                <div class=\"form-floating mb-3\">\n                    <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" id=\"displayName\"\n                        [class.is-invalid]=\"registerForm.get('displayName')?.touched && registerForm.get('displayName')?.invalid\"\n                        placeholder=\"name@example.com\">\n                    <label for=\"floatingInput\">DisplayName</label>\n                    <div class=\"invalid-feedback\"\n                        *ngIf=\"registerForm.get('displayName')?.errors && registerForm.get('displayName')?.errors['required'] === true\">\n                        Display Name is required\n                    </div>\n                </div>\n                <div class=\"form-floating mb-3\">\n                    <ng-container class=\"position-relative\">\n                        <input formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\"\n                            [class.is-invalid]=\"registerForm.get('email')?.touched && registerForm.get('email')?.invalid\"\n                            placeholder=\"name@example.com\">\n                        <i *ngIf=\"loading\" class=\"fa fa-spinner fa-spin loader\"></i>\n                        <label for=\"floatingInput\">Email address</label>\n                        <div class=\"invalid-feedback\"\n                            *ngIf=\"registerForm.get('email')?.errors && registerForm.get('email')?.errors['required'] === true\">\n                            Email is required\n                        </div>\n                        <div class=\"invalid-feedback\"\n                            *ngIf=\"registerForm.get('email')?.errors && registerForm.get('email')?.errors['email'] === true\">\n                            Email is invalid\n                        </div>\n                        <div class=\"invalid-feedback\"\n                            *ngIf=\"registerForm.get('email')?.errors && registerForm.get('email')?.errors['emailExists'] === true\">\n                            Email is taken please try another email\n                        </div>\n                    </ng-container>\n\n                </div>\n                <div class=\"form-floating\">\n                    <input formControlName=\"password\" type=\"password\" class=\"form-control\"\n                        [class.is-invalid]=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\"\n                        placeholder=\"name@example.com\" id=\"floatingPassword\" placeholder=\"Password\">\n                    <label for=\"floatingPassword\">Password</label>\n                    <div class=\"invalid-feedback\"\n                        *ngIf=\"registerForm.get('password')?.errors && registerForm.get('password')?.errors['required'] === true\">\n                        Password is required\n                    </div>\n                    <div class=\"invalid-feedback\"\n                        *ngIf=\"registerForm.get('password')?.errors && registerForm.get('password')?.errors['pattern'] === true\">\n                        Password needs to be complex, 1 uppercase, 1 lowercase with special characters and the correct\n                        minlength (6)\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-grid\">\n                <button [disabled]=\"!registerForm.valid\" class=\"btn btn-lg btn-primary mt-3\">Register</button>\n            </div>\n        </form>\n    </div>\n</div>"],"sourceRoot":"webpack:///"}